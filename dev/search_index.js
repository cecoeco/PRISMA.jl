var documenterSearchIndex = {"docs":
[{"location":"checklist/#Checklist","page":"Checklist","title":"Checklist","text":"","category":"section"},{"location":"checklist/","page":"Checklist","title":"Checklist","text":"PRISMA.checklist_dataframe\nPRISMA.checklist_template\nPRISMA.checklist_read\nPRISMA.checklist\nPRISMA.checklist_save\nPRISMA.Checklist","category":"page"},{"location":"checklist/#PRISMA.checklist_dataframe","page":"Checklist","title":"PRISMA.checklist_dataframe","text":"checklist_dataframe()::DataFrame\n\nreturns a template PRISMA checklist as a DataFrame\n\nReturns\n\nDataFrame: the template dataframe\n\nExample\n\njulia> using PRISMA\n\njulia> isa(checklist_dataframe(), DataFrame)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.checklist_template","page":"Checklist","title":"PRISMA.checklist_template","text":"checklist_template(out::Any=\"checklist.csv\")\n\nsaves a template checklist DataFrame as a CSV.\n\nArguments\n\nout::Any: Accepts the same types as CSV.write\n\nExample\n\njulia> using PRISMA\n\njulia> checklist_template()\n\"checklist.csv\"\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.checklist_read","page":"Checklist","title":"PRISMA.checklist_read","text":"checklist_read(fn::AbstractString)::DataFrame\n\nreads the template data to a DataFrame\n\nArguments\n\nfn::AbstractString: the name of the file to read\n\nReturns\n\nDataFrame: the template dataframe\n\nExample\n\njulia> using PRISMA\n\njulia> checklist_template()\n\"checklist.csv\"\n\njulia> isa(checklist_read(\"checklist.csv\"), DataFrame)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.checklist","page":"Checklist","title":"PRISMA.checklist","text":"checklist(paper::AbstractString)::Checklist\nchecklist(bytes::Vector{UInt8})::Checklist\n\nThis function returns a completed PRISMA checklist as the type Checklist.  The Checklist type includes a completed checklist as a DataFrame and the  metadata of the paper as a OrderedDict. The paper argument can be a path  to a pdf file or an array of bytes. This function uses the C++ library Poppler  via Poppler_jll to parse the pdf and the natural language processing functionality  in Julia via Transformers.jl  to find items from the checklist in the paper and populate the  Comments or location in manuscript and Yes/No/NA columns in the DataFrame  from checklist_dataframe.\n\nThe following metadata is parsed from the pdf file and stored in the OrderedDict as:\n\n\"title\": the title of the paper\n\"subject\": the subject of the paper\n\"author\": the author of the paper\n\"creator\": the creator of the paper\n\"producer\": the producer of the paper\n\"creation date\": the date the paper was created\n\"modification date\": the date the paper was last modified\n\"pages\": the number of pages in the paper\n\"paper size\": the size of the paper\n\"paper rotation\": the rotation of the paper\n\"file size\": the size of the pdf file\n\"optimized\": whether the pdf was optimized\n\"pdf version\": the version of the pdf\n\nAll keys and values in the dictionary ar eof type String. If the parsing fails the value will be an empty string.\n\nArguments\n\npaper::AbstractString: a path to a pdf file as a string\nbytes::Vector{UInt8}: the pdf data as an array of bytes\n\nReturns\n\nChecklist: a completed checklist with the paper's metadata\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.checklist_save","page":"Checklist","title":"PRISMA.checklist_save","text":"checklist_save(out::Any, cl::Checklist)\nchecklist_save(out::Any, df::DataFrame)\n\nsaves a Checklist as a CSV.\n\nArguments\n\nout::Any: Accepts the same types as CSV.write\ncl::Checklist: the checklist to save\ndf::DataFrame: the dataframe to save\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.Checklist","page":"Checklist","title":"PRISMA.Checklist","text":"Checklist(dataframe::DataFrame=checklist_dataframe(), metadata::OrderedDict=OrderedDict())\n\nthis types represents a PRISMA checklist in the form of a DataFrame and the metadata of the paper that was used to generate it as a OrderedDict.\n\nFields\n\ndataframe::DataFrame: the checklist as a DataFrame\nmetadata::OrderedDict: the metadata of the paper\n\nExample\n\nusing PRISMA\n\ncl::Checklist = checklist(\"paper.pdf\")\n\ntitle = cl.metadata[\"title\"]\nprintln(title)\n\npages = cl.metadata[\"pages\"]\nprintln(pages)\n\n\n\n\n\n","category":"type"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"J. Bezanson, A. Edelman, S. Karpinski and V. B. Shah. Julia: A fresh approach to numerical computing. SIAM Review 59, 65–98 (2017). Publisher: SIAM.\n\n\n\nM. J. Page, J. E. McKenzie, P. M. Bossuyt, I. Boutron, T. C. Hoffmann, C. D. Mulrow, L. Shamseer, J. M. Tetzlaff, E. A. Akl, S. E. Brennan, R. Chou, J. Glanville, J. M. Grimshaw, A. Hróbjartsson, M. M. Lalu, T. Li, E. W. Loder, E. Mayo-Wilson, S. McDonald, L. A. McGuinness, L. A. Stewart, J. Thomas, A. C. Tricco, V. A. Welch, P. Whiting and D. Moher. The PRISMA 2020 statement: an updated guideline for reporting systematic reviews. Systematic Reviews 10, 89 (2021). Accessed on Nov 16, 2023.\n\n\n\n","category":"page"},{"location":"flow_diagram/#Flow-Diagram","page":"Flow Diagram","title":"Flow Diagram","text":"","category":"section"},{"location":"flow_diagram/","page":"Flow Diagram","title":"Flow Diagram","text":"PRISMA.flow_diagram_dataframe\nPRISMA.flow_diagram_template\nPRISMA.flow_diagram_read\nPRISMA.flow_diagram\nPRISMA.flow_diagram_save\nPRISMA.FlowDiagram","category":"page"},{"location":"flow_diagram/#PRISMA.flow_diagram_dataframe","page":"Flow Diagram","title":"PRISMA.flow_diagram_dataframe","text":"flow_diagram_dataframe()::DataFrame\n\nreturns the template that is used to create the flow diagram as a DataFrame.\n\nReturns\n\nDataFrame: the template dataframe\n\nExample\n\njulia> using PRISMA\n\njulia> isa(flow_diagram_dataframe(), DataFrame)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.flow_diagram_template","page":"Flow Diagram","title":"PRISMA.flow_diagram_template","text":"flow_diagram_template(out::Any=\"flow_diagram.csv\")\n\nsaves the template data to create a flow diagram as a CSV file.\n\nArguments\n\nout::Any: Accepts the same types as CSV.write\n\nExample\n\ncalling the function will create a CSV file called flow_diagram.csv:\n\njulia> using PRISMA\n\njulia> flow_diagram_template()\n\"flow_diagram.csv\"\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.flow_diagram_read","page":"Flow Diagram","title":"PRISMA.flow_diagram_read","text":"flow_diagram_read(fn::AbstractString=\"flow_diagram.csv\")::DataFrame\n\nreads the template data from a CSV file\n\nArguments\n\nfn::AbstractString: the name of the file to read\n\nReturns\n\nDataFrame: the template dataframe\n\nExample\n\njulia> using PRISMA\n\njulia> flow_diagram_template()\n\"flow_diagram.csv\"\n\njulia> isa(flow_diagram_read(\"flow_diagram.csv\"), DataFrame)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.flow_diagram","page":"Flow Diagram","title":"PRISMA.flow_diagram","text":"flow_diagram(\n    data::DataFrame=flow_diagram_dataframe();\n    background_color::AbstractString=\"white\",\n    boxes_color::AbstractString=\"white\",\n    gray_boxes::Bool=true,\n    gray_boxes_color::AbstractString=\"#f0f0f0\",\n    top_boxes::Bool=true,\n    top_boxes_borders::Bool=false,\n    top_boxes_color::AbstractString=\"#ffc000\",\n    side_boxes::Bool=true,\n    side_boxes_borders::Bool=false,\n    side_boxes_color::AbstractString=\"#95cbff\",\n    previous_studies::Bool=true,\n    other_methods::Bool=true,\n    borders::Bool=true,\n    border_style::AbstractString=\"solid\",\n    border_width::Number=1,\n    border_color::AbstractString=\"black\",\n    font::AbstractString=\"Helvetica\",\n    font_color::AbstractString=\"black\",\n    font_size::Number=8,\n    arrow_head::AbstractString=\"normal\",\n    arrow_size::Number=1,\n    arrow_color::AbstractString=\"black\",\n    arrow_width::Number=1)::FlowDiagram\n\ngenerates the flow diagram figure from the flow diagram dataframe.\n\nArgument\n\ndata::DataFrame: The data used to generate the flow diagram. \n\nThis function will use the DataFrame returned by flow_diagram_dataframe, if no data is provided.\n\nKeyword Arguments\n\nbackground_color::String: the background color of the flow diagram.\nboxes_color::String: the color of the boxes.\ngray_boxes::Bool: whether to show gray boxes.\ngray_boxes_color::String: the color of the gray boxes.\ntop_boxes::Bool: whether to show top boxes.\ntop_boxes_border::Bool: whether to show top boxes border.\ntop_boxes_color::String: the color of the top boxes.\nside_boxes::Bool: whether to show side boxes.\nside_boxes_border::Bool: whether to show side boxes border.\nside_boxes_color::String: the color of the side boxes.\nprevious_studies::Bool: whether to show previous studies.\nother_methods::Bool: whether to show other methods.\nborders::Bool=true: whether to show borders.\nborder_style::String=\"solid\": the border style of the boxes.\nborder_width::Number=1: the border width of the boxes.\nborder_color::String=\"black\": the border color of the boxes.\nfont::String=\"Helvetica\": the font of the text.\nfont_color::String=\"black\": the color of the text.\nfont_size::Number=8: the font size of the text.\narrow_head::String=\"normal\": the arrow head of the arrows.\narrow_size::Number=1: the arrow size of the arrows.\narrow_color::String=\"black\": the arrow color of the arrows.\narrow_width::Number=1: the arrow width of the arrows.\n\nReturns\n\nFlowDiagram: The flow diagram figure.\n\nExample\n\nusing PRISMA\n\n# create a template to edit the data in a csv\nflow_diagram_template(\"flow_diagram.csv\")\n\n# create a `DataFrame` from the csv\ndf = flow_diagram_read(\"flow_diagram.csv\")\n\n# generate the flow diagram with the `DataFrame`\nfd = flow_diagram(df)\n\n# plot the flow diagram in the plot panel with `display`\ndisplay(fd)\n\n# save the flow diagram\nflow_diagram_save(\"flow_diagram.svg\", fd)\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.flow_diagram_save","page":"Flow Diagram","title":"PRISMA.flow_diagram_save","text":"flow_diagram_save(fn::AbstractString, fd::FlowDiagram)\n\nwrites a FlowDiagram as either a file (i.e., any Graphviz supported format)\n\nArguments\n\nfn::AbstractString: The name of the file to be saved.\nfd::FlowDiagram: The flow diagram to be saved.\n\nReturns\n\nString: The path to the saved file.\n\nExamples\n\nusing PRISMA\n\nfd = flow_diagram()\n\nflow_diagram_save(\"flow_diagram.pdf\", fd)\nflow_diagram_save(\"flow_diagram.png\", fd)\nflow_diagram_save(\"flow_diagram.svg\", fd)\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.FlowDiagram","page":"Flow Diagram","title":"PRISMA.FlowDiagram","text":"FlowDiagram(dot::AbstractString=\"\")\n\nThe type for the flow diagram that can be plotted or saved as an image.\n\nField\n\ndot::AbstractString: The flow diagram written in Graphviz's DOT language\n\n\n\n\n\n","category":"type"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PRISMA.PRISMA","category":"page"},{"location":"#PRISMA.PRISMA","page":"Home","title":"PRISMA.PRISMA","text":"PRISMA.jl\n\nJulia package for generating checklists and flow diagrams based on the 2020 Preferred Reporting Items for Systematic Reviews and Meta-Analyses (PRISMA) statement (Page et al., 2021).\n\nNew Functions and Types:\n\nFor working with PRISMA checklists:\n\nchecklist_dataframe - returns an empty PRISMA checklist as the type DataFrame\nchecklist_template - returns an empty PRISMA checklist as comma-separated values\nchecklist_read - reads the checklist data as a DataFrame from comma-separated values\nchecklist - takes a PDF and returns a completed PRISMA checklist as the type Checklist\nchecklist_save - saves a Checklist as comma-separated values\nChecklist - includes a completed checklist and paper metadata\n\nFor working with PRISMA flow diagrams:\n\nflow_diagram_dataframe - returns the template PRISMA flow diagram data as a DataFrame\nflow_diagram_template - returns the template PRISMA flow diagram data as comma-separated values\nflow_diagram_read - reads the flow diagram data as a DataFrame from comma-separated values\nflow_diagram - returns a PRISMA flow diagram as the type FlowDiagram\nflow_diagram_save - saves a FlowDiagram using Graphviz\nFlowDiagram - the flow diagram type that can be displayed in the plot panel or saved\n\nReexports\n\nDataFrames.DataFrame - both flow_diagram_dataframe and checklist_dataframe return a DataFrame\nBase.display - PRISMA adds a method for displaying the FlowDiagram in the plot panel\nBase.show - PRISMA adds new methods for printing the Checklist and FlowDiagram types\n\n\n\n\n\n","category":"module"}]
}

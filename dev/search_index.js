var documenterSearchIndex = {"docs":
[{"location":"checklist/#Checklist","page":"Checklist","title":"Checklist","text":"","category":"section"},{"location":"checklist/","page":"Checklist","title":"Checklist","text":"PRISMA.checklist_df\nPRISMA.checklist_template\nPRISMA.checklist_read\nPRISMA.checklist\nPRISMA.checklist_save\nPRISMA.Checklist","category":"page"},{"location":"checklist/#PRISMA.checklist_df","page":"Checklist","title":"PRISMA.checklist_df","text":"PRISMA.checklist_df()::DataFrame\n\nreturns a template PRISMA checklist as a DataFrame\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.checklist_template","page":"Checklist","title":"PRISMA.checklist_template","text":"checklist_template(fn::AbstractString=\"checklist.csv\")\n\nsaves a template checklist DataFrame as a CSV.\n\nArguments\n\nfn::AbstractString: the name of the file to save\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.checklist_read","page":"Checklist","title":"PRISMA.checklist_read","text":"checklist_read(fn::AbstractString)::DataFrame\n\nreads the template data to a DataFrame\n\nArguments\n\nfn::AbstractString: the name of the file to read\n\nReturns\n\nDataFrame: the template dataframe\n\nExamples\n\nusing PRISMA\n\nchecklist_template(\"checklist.csv\")\n\ndf::DataFrame = checklist_read(\"checklist.csv\")\n\nprintln(df)\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.checklist","page":"Checklist","title":"PRISMA.checklist","text":"PRISMA.checklist(paper::AbstractString)::Checklist\nPRISMA.checklist(bytes::Vector{UInt8})::Checklist\n\nReturns a completed PRISMA checklist as the type Checklist. The Checklist type includes a completed checklist as a DataFrame and the metadata of the paper as a LittleDict. The paper argument can be a path to a pdf file or an array of bytes. This function uses the C++ library Poppler via Poppler_jll to parse the pdf and the natural language processing functionality in Julia via Transformers.jl to  find items from the checklist in the paper and populate the  Comments or location in manuscript and Yes/No/NA columns in the DataFrame  from checklist_df().\n\nThe following metadata is parsed from the pdf file and stored in the LittleDict as:\n\n\"title\": the title of the paper\n\"subject\": the subject of the paper\n\"author\": the author of the paper\n\"creator\": the creator of the paper\n\"producer\": the producer of the paper\n\"creation date\": the date the paper was created\n\"modification date\": the date the paper was last modified\n\"pages\": the number of pages in the paper\n\"paper size\": the size of the paper\n\"paper rotation\": the rotation of the paper\n\"file size\": the size of the pdf file\n\"optimized\": whether the pdf was optimized\n\"pdf version\": the version of the pdf\n\nAll keys and values in the dictionary ar eof type String. If the parsing fails the value will be an empty string.\n\nArguments\n\npaper::AbstractString: a path to a pdf file as a string\nbytes::Vector{UInt8}: the pdf data as an array of bytes\n\nReturns\n\nChecklist: a completed checklist with paper metadata\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.checklist_save","page":"Checklist","title":"PRISMA.checklist_save","text":"checklist_save(fn::AbstractString, cl::Checklist)\n\nsaves a Checklist as a CSV.\n\nArguments\n\nfn::AbstractString: the name of the file to save\ncl::Checklist: the checklist to save\n\n\n\n\n\n","category":"function"},{"location":"checklist/#PRISMA.Checklist","page":"Checklist","title":"PRISMA.Checklist","text":"PRISMA.Checklist\n\nthis types represents a PRISMA checklist in the form of a DataFrame and the metadata of the paper that was used to generate it as a Dict.\n\nFields\n\ndataframe::DataFrame: the checklist as a DataFrame\nmetadata::Dict: the metadata of the paper\n\nExamples\n\nusing PRISMA\n\ncl::Checklist = checklist(\"paper.pdf\")\n\ntitle = cl.metadata[\"title\"]\nprintln(title)\n\npages = cl.metadata[\"pages\"]\nprintln(pages)\n\n\n\n\n\n","category":"type"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Bezanson, J.; Edelman, A.; Karpinski, S. and Shah, V. B. (2017). Julia: A fresh approach to numerical computing. SIAM Review 59, 65–98. Publisher: SIAM.\n\n\n\nPage, M. J.; McKenzie, J. E.; Bossuyt, P. M.; Boutron, I.; Hoffmann, T. C.; Mulrow, C. D.; Shamseer, L.; Tetzlaff, J. M.; Akl, E. A.; Brennan, S. E.; Chou, R.; Glanville, J.; Grimshaw, J. M.; Hróbjartsson, A.; Lalu, M. M.; Li, T.; Loder, E. W.; Mayo-Wilson, E.; McDonald, S.; McGuinness, L. A.; Stewart, L. A.; Thomas, J.; Tricco, A. C.; Welch, V. A.; Whiting, P. and Moher, D. (2021). The PRISMA 2020 statement: an updated guideline for reporting systematic reviews. Systematic Reviews 10, 89. Accessed on Nov 16, 2023.\n\n\n\n","category":"page"},{"location":"flow_diagram/#Flow-Diagram","page":"Flow Diagram","title":"Flow Diagram","text":"","category":"section"},{"location":"flow_diagram/","page":"Flow Diagram","title":"Flow Diagram","text":"PRISMA.flow_diagram_df\nPRISMA.flow_diagram_template\nPRISMA.flow_diagram_read\nPRISMA.flow_diagram\nPRISMA.flow_diagram_save\nPRISMA.FlowDiagram","category":"page"},{"location":"flow_diagram/#PRISMA.flow_diagram_df","page":"Flow Diagram","title":"PRISMA.flow_diagram_df","text":"PRISMA.flow_diagram_df()::DataFrame\n\nreturns the template that is used to create the flow diagram as a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.flow_diagram_template","page":"Flow Diagram","title":"PRISMA.flow_diagram_template","text":"PRISMA.flow_diagram_template(fn::AbstractString=\"flow_diagram.csv\")\n\nsaves the template data to create a flow diagram as a CSV file.\n\nArguments\n\nfn::AbstractString: the name of the file to saved\n\nExample\n\ncalling the function will create a CSV file called flow_diagram.csv\n\nusing PRISMA\n\nPRISMA.flow_diagram_template()\n\nprintln(isfile(\"flow_diagram.csv\"))\njulia> true\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.flow_diagram_read","page":"Flow Diagram","title":"PRISMA.flow_diagram_read","text":"flow_diagram_read(fn::AbstractString)::DataFrame\n\nreads the template data from a CSV file\n\nArguments\n\nfn::AbstractString: the name of the file to read\n\nReturns\n\nDataFrame: the template dataframe\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.flow_diagram","page":"Flow Diagram","title":"PRISMA.flow_diagram","text":"PRISMA.flow_diagram(\n    data::DataFrame=flow_diagram_df(),\n    background_color::AbstractString=\"white\",\n    grayboxes::Bool=true,\n    grayboxes_color::AbstractString=\"#f0f0f0\",\n    top_boxes::Bool=true,\n    top_boxes_borders::Bool=false,\n    top_boxes_color::AbstractString=\"#ffc000\",\n    side_boxes::Bool=true,\n    side_boxes_borders::Bool=false,\n    side_boxes_color::AbstractString=\"#95cbff\",\n    previous_studies::Bool=true,\n    other_methods::Bool=true,\n    borders::Bool=true,\n    border_style::AbstractString=\"solid\",\n    border_width::Union{AbstractString,Number}=1,\n    border_color::AbstractString=\"black\",\n    font::AbstractString=\"Helvetica\",\n    font_color::AbstractString=\"black\",\n    font_size::Union{AbstractString,Number}=1,\n    arrow_head::AbstractString=\"normal\",\n    arrow_size::Union{AbstractString,Number}=1,\n    arrow_color::AbstractString=\"black\",\n    arrow_width::Union{AbstractString,Number}=1)::PRISMA.FlowDiagram\n\ngenerates the flow diagram figure from the flow diagram dataframe.\n\nArgument\n\ndata::DataFrame: The flow diagram dataframe. Default is flow_diagram_df().\n\nKeyword Arguments\n\nbackground_color::String: The background color of the flow diagram. Default is white.\ngrayboxes::Bool: Whether to show gray boxes. Default is true.\ngrayboxes_color::String: The color of the gray boxes. Default is #f0f0f0.\ntop_boxes::Bool: Whether to show top boxes. Default is true.\ntop_boxes_border::Bool: Whether to show top boxes border. Default is false.\ntop_boxes_color::String: The color of the top boxes. Default is #ffc000.\nside_boxes::Bool: Whether to show side boxes. Default is true.\nside_boxes_border::Bool: Whether to show side boxes border. Default is false.\nside_boxes_color::String: The color of the side boxes. Default is #95cbff.\nprevious_studies::Bool: Whether to show previous studies. Default is true.\nother_methods::Bool: Whether to show other methods. Default is `\nbox_border_width::Number: The border width of the boxes. Default is 1.\nbox_border_color::String: The border color of the boxes. Default is black.\nfont::String: The font of the text. Default is Helvetica.\nfont_color::String: The color of the text. Default is black.\nfont_size::Number: The font size of the text. Default is 10.\narrow_color::String: The color of the arrows. Default is black.\narrow_width::Number: The width of the arrows. Default is 1.\n\nReturns\n\nPRISMA.FlowDiagram: The flow diagram figure.\n\nExample\n\nusing PRISMA\n\n# create a template to edit the data in a csv\nPRISMA.flow_diagram_template(\"flow_diagram.csv\")\n\n# create a `DataFrame` from the csv\ndf::DataFrame = PRISMA.flow_diagram_read(\"flow_diagram.csv\")\n\n# generate the flow diagram with the `DataFrame`\nfd::PRISMA.FlowDiagram = PRISMA.flow_diagram(df)\n\n# save the flow diagram\nPRISMA.flow_diagram_save(\"flow_diagram.svg\", fd)\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.flow_diagram_save","page":"Flow Diagram","title":"PRISMA.flow_diagram_save","text":"PRISMA.flow_diagram_save(fn::AbstractString, fd::FlowDiagram)\n\nwrites a FlowDiagram as either a file (i.e., any Graphviz supported format)\n\nArguments\n\nfn::AbstractString: The name of the file to be saved.\nfd::FlowDiagram: The flow diagram to be saved.\n\nReturns\n\nString: The path to the saved file.\n\nExamples\n\nusing PRISMA\n\nfd = PRISMA.flow_diagram()\n\nPRISMA.flow_diagram_save(\"flow_diagram.pdf\", fd)\nPRISMA.flow_diagram_save(\"flow_diagram.png\", fd)\nPRISMA.flow_diagram_save(\"flow_diagram.svg\", fd)\n\n\n\n\n\n","category":"function"},{"location":"flow_diagram/#PRISMA.FlowDiagram","page":"Flow Diagram","title":"PRISMA.FlowDiagram","text":"PRISMA.FlowDiagram\n\nflow diagram type for PRISMA.jl\n\nField\n\ndot::AbstractString: The flow diagram written in Graphviz's DOT language\n\n\n\n\n\n","category":"type"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PRISMA.PRISMA","category":"page"},{"location":"#PRISMA.PRISMA","page":"Home","title":"PRISMA.PRISMA","text":"PRISMA.jl\n\nJulia package for generating checklists and flow diagrams based on the 2020 Preferred Reporting Items for Systematic Reviews and Meta-Analyses (PRISMA) statement (Page et al., 2021).\n\nFunctions\n\nchecklist_df: returns an empty PRISMA checklist as the type DataFrame\nchecklist_template: returns a template PRISMA checklist as a .csv file\nchecklist_read: reads the checklist data as a DataFrame from a data file\nchecklist: returns a completed PRISMA checklist as the type Checklist\nchecklist_save: saves a Checklist as a .csv file\nflow_diagram_df: returns the DataFrame that is used to create the flow diagram\nflow_diagram_template: returns a template PRISMA flow diagram data as a .csv file\nflow_diagram_read: reads the flow diagram data as a DataFrame from a data file\nflow_diagram: returns a PRISMA flow diagram as the type FlowDiagram\nflow_diagram_save: saves a FlowDiagram to file formats supported by Graphviz\n\nTypes\n\nChecklist: includes a completed checklist and paper metadata\nFlowDiagram: the PRISMA flow diagram represented as Graphviz's DOT language\n\nReexports\n\nDataFrames.DataFrame: both flow_diagram_df and checklist_df return a DataFrame\nBase.display: PRISMA adds a method for displaying the FlowDiagram type\nBase.show: PRISMA adds new methods for showing the Checklist and FlowDiagram types\n\n\n\n\n\n","category":"module"}]
}
